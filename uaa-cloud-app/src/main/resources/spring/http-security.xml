<?xml version="1.0" encoding="UTF-8" ?>
<!--
    Cloud Foundry
    Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.

    This product is licensed to you under the Apache License, Version 2.0 (the "License").
    You may not use this product except in compliance with the License.

    This product includes a number of subcomponents with
    separate copyright notices and license terms. Your use of these
    subcomponents is subject to the terms and conditions of the
    subcomponent's license, as noted in the LICENSE file.

-->
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.springframework.org/schema/beans"
    xmlns:sec="http://www.springframework.org/schema/security" xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
       xmlns:security="http://www.springframework.org/schema/security"
    xmlns:util="http://www.springframework.org/schema/util"
    xsi:schemaLocation="http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2-2.0.xsd
        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.2.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.1.xsd">

    <sec:http name="secFilterOpen01" pattern="/resources/**" security="none" />
    <sec:http name="secFilterOpen02" pattern="/square-logo.png" security="none" />
    <sec:http name="secFilterOpen03" pattern="/info" security="none" />
    <sec:http name="secFilterOpen04" pattern="/password/**" security="none" />
    <sec:http name="secFilterOpen05Healthz" pattern="/healthz/**" security="none" />
    <sec:http name="secFilterOpen06" pattern="/saml/web/**" security="none" />
    <sec:http name="secFilterOpen07" pattern="/vendor/**" security="none" />
    <!--<sec:http pattern="/login" security="none" />-->
    <sec:http name="secFilterOpen08" pattern="/error" security="none" />
    <sec:http name="secFilterOpen11" pattern="/email_sent" security="none" />
    <sec:http name="secFilterOpen12" pattern="/create_account*" security="none" />
    <sec:http name="secFilterOpen13" pattern="/accounts/email_sent" security="none" />
    <sec:http name="secFilterCsrfLandingPage14" pattern="/invalid_request" security="none" />
    <sec:http name="secFilterOpen15" pattern="/saml_error" security="none" />
    <sec:http name="secFilterOpen16" pattern="/favicon.ico" security="none" />
    <sec:http name="secFilterOpen17" pattern="/oauth_error" security="none" />
    <sec:http name="secFilterOpen18" pattern="/session" security="none" />
    <sec:http name="secFilterWellKnownOpen19" pattern="/oauth/token/.well-known/openid-configuration" security="none" />
    <sec:http name="secFilterWellKnownOpen20" pattern="/.well-known/openid-configuration" security="none" />

    <http name="secFilterLoginServerAuthenticate" request-matcher-ref="loginAuthenticateRequestMatcher" create-session="never" entry-point-ref="oauthAuthenticationEntryPoint"
          authentication-manager-ref="loginAuthenticationMgr" xmlns="http://www.springframework.org/schema/security" use-expressions="false">
        <intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY" />
        <custom-filter ref="oauthResourceAuthenticationFilter" position="PRE_AUTH_FILTER" />
        <!-- scope authentication filter configured with a scope authentication manager -->
        <custom-filter ref="oauthLoginScopeAuthenticatingFilter" after="PRE_AUTH_FILTER"/>
        <anonymous enabled="false" />
        <access-denied-handler ref="oauthAccessDeniedHandler" />
        <csrf disabled="true"/>
    </http>

    <sec:http name="secFilterAuthenticateOpen"  pattern="/authenticate/**" security="none" />

    <http name="secFilterLoginServerAuthorize" request-matcher-ref="loginAuthorizeRequestMatcher" create-session="never" entry-point-ref="oauthAuthenticationEntryPoint"
          authentication-manager-ref="loginAuthenticationMgr" xmlns="http://www.springframework.org/schema/security" use-expressions="false">
        <intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY" />
        <custom-filter ref="backwardsCompatibleScopeParameter" position="FIRST"/>
        <custom-filter ref="oauthResourceAuthenticationFilter" position="PRE_AUTH_FILTER" />
        <!-- scope authentication filter configured with a scope authentication manager -->
        <custom-filter ref="oauthLoginScopeAuthenticatingFilter" after="PRE_AUTH_FILTER"/>
        <custom-filter ref="loginAuthenticationFilter" position="FORM_LOGIN_FILTER" />
        <anonymous enabled="false" />
        <access-denied-handler ref="oauthAccessDeniedHandler" />
        <csrf disabled="true"/>
    </http>

    <http name="secFilterLoginServerToken" request-matcher-ref="loginTokenRequestMatcher" create-session="never" entry-point-ref="oauthAuthenticationEntryPoint"
          authentication-manager-ref="loginAuthenticationMgr" xmlns="http://www.springframework.org/schema/security" use-expressions="false">
        <!--
          This represents a /oauth/token requests that gets passed through
          from the login server. It assumes that the User has been authenticated
          It requires that:
           - userid parameter exists
           - client_id and client_secret are present
           - Bearer token belongs to login server (oauth.login) validated as resource="oauth"
        -->
        <intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY" />
        <!-- the oauthResourceAuthenticationFilter validates the Bearer token
             TODO, if there is no token this filter must throw.
             What we need is scope=oauth.login
         -->
        <custom-filter ref="backwardsCompatibleScopeParameter" position="FIRST"/>
        <custom-filter ref="oauthResourceAuthenticationFilter" position="PRE_AUTH_FILTER" />
        <!-- scope authentication filter configured with a scope authentication manager -->
        <custom-filter ref="oauthLoginScopeAuthenticatingFilter" after="PRE_AUTH_FILTER"/>
        <!-- filter to validate the client_id and client_secret -->
        <custom-filter ref="loginClientParameterAuthenticationFilter" position="FORM_LOGIN_FILTER" />
        <!-- The loginServerTokenEndpointAuthenticationFilter validates the user or creates one-->
        <custom-filter ref="loginServerTokenEndpointAuthenticationFilter" position="BASIC_AUTH_FILTER"/>
        <anonymous enabled="false" />
        <access-denied-handler ref="oauthAccessDeniedHandler" />
        <csrf disabled="true"/>
    </http>

    <!-- Support for older login servers -->
    <http name="secFilterLoginServerAuthorizeOld" request-matcher-ref="loginAuthorizeRequestMatcherOld" create-session="always" entry-point-ref="oauthAuthenticationEntryPoint"
          authentication-manager-ref="loginAuthenticationMgr" xmlns="http://www.springframework.org/schema/security" use-expressions="false">
        <intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY" />
        <custom-filter ref="backwardsCompatibleScopeParameter" position="FIRST"/>
        <custom-filter ref="oauthResourceAuthenticationFilter" position="PRE_AUTH_FILTER" />
        <custom-filter ref="loginAuthenticationFilter" position="FORM_LOGIN_FILTER" />
        <anonymous enabled="false" />
        <access-denied-handler ref="oauthAccessDeniedHandler" />
        <csrf disabled="true"/>
    </http>

    <http name="secFilterLoginServerPasswordEndpoints" create-session="stateless" entry-point-ref="oauthAuthenticationEntryPoint" authentication-manager-ref="emptyAuthenticationManager"
          pattern="/password_*" xmlns="http://www.springframework.org/schema/security"  use-expressions="true">
        <intercept-url pattern="/**" access="#oauth2.hasScope('oauth.login') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin')" />
        <custom-filter ref="oauthWithoutResourceAuthenticationFilter" position="PRE_AUTH_FILTER" />
        <anonymous enabled="false" />
        <access-denied-handler ref="oauthAccessDeniedHandler" />
        <expression-handler ref="oauthWebExpressionHandler"/>
        <csrf disabled="true"/>
    </http>

    <http name="secFilterLoginServerEmailEndpoints" create-session="stateless" entry-point-ref="oauthAuthenticationEntryPoint" authentication-manager-ref="emptyAuthenticationManager"
          access-decision-manager-ref="accessDecisionManager" pattern="/email_*" xmlns="http://www.springframework.org/schema/security" use-expressions="false">
        <intercept-url pattern="/**" access="scope=oauth.login" />
        <custom-filter ref="oauthResourceAuthenticationFilter" position="PRE_AUTH_FILTER" />
        <anonymous enabled="false" />
        <access-denied-handler ref="oauthAccessDeniedHandler" />
        <csrf disabled="true"/>
    </http>

    <http  name="tokenRevocationFilter"
           pattern="/oauth/token/revoke/**"
           create-session="stateless"
           authentication-manager-ref="emptyAuthenticationManager"
           entry-point-ref="oauthAuthenticationEntryPoint"
           xmlns="http://www.springframework.org/schema/security" use-expressions="true">
        <intercept-url pattern="/oauth/token/revoke/client/**" access="#oauth2.hasScope('tokens.revoke')" />
        <intercept-url pattern="/oauth/token/revoke/user/**/client/**" access="#oauth2.hasScope('uaa.admin') or #oauth2.hasScope('tokens.revoke') or (@self.isUserTokenRevocationForSelf(request, 4) and @self.isClientTokenRevocationForSelf(request, 6))" />
        <intercept-url pattern="/oauth/token/revoke/user/**" access="#oauth2.hasScope('uaa.admin') or (#oauth2.hasScope('tokens.revoke') and @self.isUserTokenRevocationForSelf(request, 4))" />
        <intercept-url pattern="/oauth/token/revoke/**" access="#oauth2.hasScope('tokens.revoke') or @self.isTokenRevocationForSelf(request, 3)" method="DELETE"/>
        <intercept-url pattern="/**" access="denyAll" />
        <custom-filter ref="resourceAgnosticAuthenticationFilter" position="PRE_AUTH_FILTER" />
        <access-denied-handler ref="oauthAccessDeniedHandler" />
        <expression-handler ref="oauthWebExpressionHandler" />
        <csrf disabled="true"/>
    </http>

    <http  name="tokenListFilter"
           pattern="/oauth/token/list/**"
           create-session="stateless"
           authentication-manager-ref="emptyAuthenticationManager"
           entry-point-ref="oauthAuthenticationEntryPoint"
           xmlns="http://www.springframework.org/schema/security" use-expressions="true">
        <intercept-url pattern="/oauth/token/list/user/**" access="#oauth2.hasScope('tokens.list')" method="GET"/>
        <intercept-url pattern="/oauth/token/list/client/**" access="#oauth2.hasScope('tokens.list')" method="GET"/>
        <intercept-url pattern="/**" access="denyAll" />
        <custom-filter ref="resourceAgnosticAuthenticationFilter" position="PRE_AUTH_FILTER" />
        <access-denied-handler ref="oauthAccessDeniedHandler" />
        <expression-handler ref="oauthWebExpressionHandler" />
        <csrf disabled="true"/>
    </http>

    <!-- Owner password flow for external authentication (SAML) -->
    <!-- Pattern: /oauth/token parameters:{grant_type=password,passcode= -->
    <http name="tokenEndpointSecurityForPasscodes" request-matcher-ref="passcodeTokenMatcher" create-session="stateless" use-expressions="false"
          entry-point-ref="basicAuthenticationEntryPoint" xmlns="http://www.springframework.org/schema/security"  authentication-manager-ref="emptyAuthenticationManager">
        <intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY" />
        <anonymous enabled="false" />
        <custom-filter ref="backwardsCompatibleScopeParameter" position="FIRST"/>
        <custom-filter ref="clientParameterAuthenticationFilter" before="BASIC_AUTH_FILTER"/>
        <custom-filter ref="clientAuthenticationFilter" position="BASIC_AUTH_FILTER" />
        <custom-filter ref="passcodeAuthenticationFilter" after="BASIC_AUTH_FILTER" />
        <access-denied-handler ref="oauthAccessDeniedHandler" />
        <csrf disabled="true"/>
    </http>

    <!-- Version of the /oauth/token endpoint for stateless clients
         /oauth/token Authorization: Bearer <access_token> grant_type=user_token&client_id=<value>&response_type=token
    -->
    <http name="statelessTokenApiSecurity" request-matcher-ref="oauthTokenApiRequestMatcher" create-session="stateless"
          entry-point-ref="oauthAuthenticationEntryPoint" authentication-manager-ref="emptyAuthenticationManager"
          xmlns="http://www.springframework.org/schema/security" use-expressions="true">
        <intercept-url pattern="/**" access="#oauth2.hasScope('uaa.user')" />
        <custom-filter ref="backwardsCompatibleScopeParameter" position="FIRST"/>
        <custom-filter ref="resourceAgnosticAuthenticationFilter" position="PRE_AUTH_FILTER" />
        <access-denied-handler ref="oauthAccessDeniedHandler" />
        <expression-handler ref="oauthWebExpressionHandler" />
        <anonymous enabled="false" />
        <csrf disabled="true"/>
    </http>

    <!--/oauth/token with any match -->
    <http name="tokenEndpointSecurity" create-session="stateless" authentication-manager-ref="clientAuthenticationManager" use-expressions="false"
          pattern="/oauth/token/**" entry-point-ref="basicAuthenticationEntryPoint" xmlns="http://www.springframework.org/schema/security">
        <intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY" />
        <anonymous enabled="false" />
        <custom-filter ref="backwardsCompatibleScopeParameter" position="FIRST"/>
        <custom-filter ref="clientAuthenticationFilter" position="BASIC_AUTH_FILTER" />
        <custom-filter ref="clientParameterAuthenticationFilter" before="BASIC_AUTH_FILTER" />
        <custom-filter ref="tokenEndpointAuthenticationFilter" after="BASIC_AUTH_FILTER" />
        <access-denied-handler ref="oauthAccessDeniedHandler" />
        <csrf disabled="true"/>
    </http>

    <!-- Version of the /authorize endpoint for stateless clients such as cf
         /oauth/authorize response_type=token&source=credentials
    -->
    <http name="statelessAuthzEndpointSecurity" request-matcher-ref="oauthAuthorizeRequestMatcher" create-session="stateless"
          entry-point-ref="oauthAuthenticationEntryPoint" authentication-manager-ref="zoneAwareAuthzAuthenticationManager"
          xmlns="http://www.springframework.org/schema/security" use-expressions="false">
        <intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY" />
        <custom-filter ref="backwardsCompatibleScopeParameter" position="FIRST"/>
        <custom-filter ref="authzAuthenticationFilter" position="FORM_LOGIN_FILTER" />
        <anonymous enabled="false" />
        <access-denied-handler ref="oauthAccessDeniedHandler" />
        <csrf disabled="true"/>
    </http>

    <!-- Version of the /authorize endpoint for stateless clients such as cf
         /oauth/authorize Authorization: Bearer <access_token> response_type=code&client_id=<value>&grant_type=authorization_code
    -->
    <http name="statelessAuthorizeApiSecurity" request-matcher-ref="oauthAuthorizeApiRequestMatcher" create-session="stateless"
          entry-point-ref="oauthAuthenticationEntryPoint" authentication-manager-ref="emptyAuthenticationManager"
          xmlns="http://www.springframework.org/schema/security" use-expressions="true">
        <intercept-url pattern="/**" access="#oauth2.hasScope('uaa.user')" />
        <custom-filter ref="backwardsCompatibleScopeParameter" position="FIRST"/>
        <custom-filter ref="resourceAgnosticAuthenticationFilter" position="PRE_AUTH_FILTER" />
        <access-denied-handler ref="oauthAccessDeniedHandler" />
        <expression-handler ref="oauthWebExpressionHandler" />
        <anonymous enabled="false" />
        <csrf disabled="true"/>
    </http>

    <http name="promptStatelessTokenApiSecurity"
          disable-url-rewriting="true"
          entry-point-ref="promptOauthAuthorizeEntryPoint"
          use-expressions="false"
          request-matcher-ref="promptOauthAuthorizeApiRequestMatcher"
          create-session="never"
          xmlns="http://www.springframework.org/schema/security">
        <intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY" />
        <csrf disabled="true"/>
    </http>

    <http name="xOauthCallbackEndpointSecurity" request-matcher-ref="xOauthCallbackRequestMatcher" entry-point-ref="loginEntryPoint"
          xmlns="http://www.springframework.org/schema/security" use-expressions="false">
        <intercept-url pattern="**" access="IS_AUTHENTICATED_FULLY"/>
        <custom-filter ref="xOauthCallbackAuthenticationFilter" position="FORM_LOGIN_FILTER" />
        <anonymous enabled="false" />
        <csrf disabled="true"/>
    </http>

    <!-- For backwards compatibility to the old way of posting credentials to /authorize endpoint
         /oauth/authorize response_type=token&credentials={
    -->
    <http name="oldAuthzEndpointSecurity" request-matcher-ref="oauthAuthorizeRequestMatcherOld" create-session="stateless"
          entry-point-ref="oauthAuthenticationEntryPoint" authentication-manager-ref="zoneAwareAuthzAuthenticationManager"
          xmlns="http://www.springframework.org/schema/security" use-expressions="false">
        <intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY" />
        <custom-filter ref="backwardsCompatibleScopeParameter" position="FIRST"/>
        <custom-filter ref="authzAuthenticationFilter" position="FORM_LOGIN_FILTER" />
        <anonymous enabled="false" />
        <access-denied-handler ref="oauthAccessDeniedHandler" />
        <csrf disabled="true"/>
    </http>

    <http name="groupEndpointSecurity" pattern="/Groups/**" create-session="stateless" entry-point-ref="oauthAuthenticationEntryPoint"
          use-expressions="true" authentication-manager-ref="emptyAuthenticationManager" xmlns="http://www.springframework.org/schema/security">
        <intercept-url pattern="/Groups/zones" access="#oauth2.hasScopeInAuthZone('scim.zones')" />
        <intercept-url pattern="/Groups/zones/**" access="#oauth2.hasScopeInAuthZone('scim.zones')" />
        <intercept-url pattern="/Groups/External" access="#oauth2.hasScope('scim.read') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin')" method="GET" />
        <intercept-url pattern="/Groups/External" access="#oauth2.hasScope('scim.write') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin')" method="POST" />
        <intercept-url pattern="/Groups/External/**" access="#oauth2.hasScope('scim.write') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin')" method="DELETE" />
        <intercept-url pattern="/Groups/**" access="#oauth2.hasScope('scim.write') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin')" method="DELETE" />
        <intercept-url pattern="/Groups/**" access="#oauth2.hasAnyScope('scim.write', 'groups.update') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin')" method="PUT" />
        <intercept-url pattern="/Groups/**" access="#oauth2.hasAnyScope('scim.write', 'groups.update') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin')" method="POST" />
        <intercept-url pattern="/Groups/**" access="#oauth2.hasScope('scim.read') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin')" method="GET" />
        <intercept-url pattern="/Groups/**" access="#oauth2.hasAnyScope('scim.write', 'groups.update') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin')" method="PATCH" />
        <intercept-url pattern="/Groups" access="#oauth2.hasScope('scim.write') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin')" method="POST" />
        <intercept-url pattern="/**" access="denyAll"/>
        <!--<intercept-url pattern="/**" access="ROLE_NONEXISTENT" />-->
        <custom-filter ref="resourceAgnosticAuthenticationFilter" position="PRE_AUTH_FILTER" />
        <access-denied-handler ref="oauthAccessDeniedHandler" />
        <expression-handler ref="oauthWebExpressionHandler" />
        <csrf disabled="true"/>
    </http>

    <http name="scimUserPassword" pattern="/User*/*/password" create-session="stateless" authentication-manager-ref="emptyAuthenticationManager"
          entry-point-ref="oauthAuthenticationEntryPoint" access-decision-manager-ref="accessDecisionManager"  use-expressions="false"
          xmlns="http://www.springframework.org/schema/security">
        <intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY,scope=password.write" />
        <custom-filter ref="passwordResourceAuthenticationFilter" position="PRE_AUTH_FILTER" />
        <access-denied-handler ref="oauthAccessDeniedHandler" />
        <csrf disabled="true"/>
    </http>

    <bean name="self" class="com.tianzhu.identity.uaa.security.IsSelfCheck">
        <constructor-arg name="tokenProvisioning" ref="revocableTokenProvisioning"/>
    </bean>

    <http  name="scimUsers" pattern="/Users/**" create-session="stateless" authentication-manager-ref="emptyAuthenticationManager"
           entry-point-ref="oauthAuthenticationEntryPoint"
           xmlns="http://www.springframework.org/schema/security" use-expressions="true">
        <intercept-url pattern="/Users/*/verify-link" access="#oauth2.hasAnyScope('scim.create') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin')" method="GET" />
        <intercept-url pattern="/Users/*/verify" access="#oauth2.hasAnyScope('scim.write','scim.create') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin')" method="GET" />
        <intercept-url pattern="/Users/*/status" access="#oauth2.hasAnyScope('scim.write','uaa.account_status.write') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin')" method="PATCH" />
        <intercept-url pattern="/Users/**" access="#oauth2.hasAnyScope('scim.read') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin') or @self.isUserSelf(request,1)" method="GET" /> <!-- add self logic -->
        <intercept-url pattern="/Users/*" access="#oauth2.hasAnyScope('scim.write') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin')" method="DELETE" />
        <intercept-url pattern="/Users/*" access="#oauth2.hasAnyScope('scim.write') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin') or @self.isUserSelf(request,1)" method="PUT" /> <!-- add self logic -->
        <intercept-url pattern="/Users/*" access="#oauth2.hasAnyScope('scim.write') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin') or @self.isUserSelf(request,1)" method="PATCH" />
        <intercept-url pattern="/Users" access="#oauth2.hasAnyScope('scim.write','scim.create') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin')" method="POST" />
        <intercept-url pattern="/**" access="denyAll" />
        <expression-handler ref="oauthWebExpressionHandler" />
        <custom-filter ref="resourceAgnosticAuthenticationFilter" position="PRE_AUTH_FILTER" />
        <access-denied-handler ref="oauthAccessDeniedHandler" />
        <csrf disabled="true"/>
    </http>

    <http  name="scimUserIds" pattern="/ids/Users*" create-session="stateless" authentication-manager-ref="emptyAuthenticationManager"
           entry-point-ref="oauthAuthenticationEntryPoint" access-decision-manager-ref="accessDecisionManager" use-expressions="false"
           xmlns="http://www.springframework.org/schema/security">
        <intercept-url pattern="/**" access="scope=scim.userids" />
        <custom-filter ref="idsResourceAuthenticationFilter" position="PRE_AUTH_FILTER" />
        <access-denied-handler ref="oauthAccessDeniedHandler" />
        <csrf disabled="true"/>
    </http>

    <http name="mfaProviderSecurity" pattern="/mfa-providers/**" create-session="stateless"
          entry-point-ref="oauthAuthenticationEntryPoint"
          use-expressions="true" authentication-manager-ref="emptyAuthenticationManager"
          xmlns="http://www.springframework.org/schema/security">
        <intercept-url pattern="/mfa-providers"
                       access="#oauth2.hasScopeInAuthZone('zones.{zone.id}.admin') or #oauth2.hasScope('uaa.admin')"
                       method="POST"/>
        <intercept-url pattern="/mfa-providers"
                       access="#oauth2.hasScopeInAuthZone('zones.{zone.id}.admin') or #oauth2.hasScope('uaa.admin')"
                       method="GET"/>
        <intercept-url pattern="/mfa-providers/*"
                       access="#oauth2.hasScopeInAuthZone('zones.{zone.id}.admin') or #oauth2.hasScope('uaa.admin')"
                       method="PUT"/>
        <intercept-url pattern="/mfa-providers/*"
                       access="#oauth2.hasScopeInAuthZone('zones.{zone.id}.admin') or #oauth2.hasScope('uaa.admin')"
                       method="GET"/>
        <intercept-url pattern="/mfa-providers/*"
                       access="#oauth2.hasScopeInAuthZone('zones.{zone.id}.admin') or #oauth2.hasScope('uaa.admin')"
                       method="DELETE"/>
        <intercept-url pattern="/**" access="denyAll"/>
        <csrf disabled="true"/>
        <custom-filter ref="resourceAgnosticAuthenticationFilter" before="PRE_AUTH_FILTER"/>
        <access-denied-handler ref="oauthAccessDeniedHandler"/>
        <expression-handler ref="oauthWebExpressionHandler"/>
    </http>

    <http name="identityZoneSecurity" pattern="/identity-zones/**" create-session="stateless"
          entry-point-ref="oauthAuthenticationEntryPoint"
          use-expressions="true" authentication-manager-ref="emptyAuthenticationManager"
          xmlns="http://www.springframework.org/schema/security">
        <intercept-url pattern="/identity-zones"
                       access="#oauth2.hasScopeInAuthZone('zones.read') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin') or #oauth2.hasScope('zones.write')"
                       method="GET"/>
        <intercept-url pattern="/identity-zones/*"
                       access="#oauth2.hasScopeInAuthZone('zones.read') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.read') or #oauth2.hasScope('zones.write')"
                       method="GET"/>
        <intercept-url pattern="/identity-zones/*/clients" access="#oauth2.hasScopeInAuthZone('zones.write')"
                       method="POST"/>
        <intercept-url pattern="/identity-zones/*/clients/*" access="#oauth2.hasScopeInAuthZone('zones.write')"
                       method="DELETE"/>
        <intercept-url pattern="/**"
                       access="#oauth2.hasScopeInAuthZone('zones.write') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin')"
                       method="POST"/>
        <intercept-url pattern="/**"
                       access="#oauth2.hasScopeInAuthZone('zones.write') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin') or #oauth2.hasScope('zones.write')"
                       method="PUT"/>
        <intercept-url pattern="/**"
                       access="#oauth2.hasScopeInAuthZone('zones.write') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin')"
                       method="DELETE"/>
        <intercept-url pattern="/**" access="denyAll"/>

        <custom-filter ref="resourceAgnosticAuthenticationFilter" before="PRE_AUTH_FILTER"/>
        <access-denied-handler ref="oauthAccessDeniedHandler"/>
        <expression-handler ref="oauthWebExpressionHandler"/>
        <csrf disabled="true"/>
    </http>

    <http name="identityProviderSecurity" pattern="/identity-providers/**" create-session="stateless"
          entry-point-ref="oauthAuthenticationEntryPoint"
          use-expressions="true" authentication-manager-ref="emptyAuthenticationManager"
          xmlns="http://www.springframework.org/schema/security">
        <intercept-url pattern="/**"
                       access="#oauth2.hasScope('idps.write') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin')"
                       method="POST"/>
        <intercept-url pattern="/**"
                       access="#oauth2.hasScope('idps.write') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin')"
                       method="PUT"/>
        <intercept-url pattern="/**"
                       access="#oauth2.hasScope('idps.write') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin')"
                       method="PATCH"/>
        <intercept-url pattern="/**"
                       access="#oauth2.hasScope('idps.write') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin')"
                       method="DELETE"/>
        <intercept-url pattern="/**"
                       access="#oauth2.hasScope('idps.read') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin')"
                       method="GET"/>
        <intercept-url pattern="/**" access="denyAll"/>
        <custom-filter ref="resourceAgnosticAuthenticationFilter" before="PRE_AUTH_FILTER"/>
        <expression-handler ref="oauthWebExpressionHandler"/>
        <csrf disabled="true"/>
    </http>

    <http name="serviceProviderSecurity" pattern="/saml/service-providers/**" create-session="stateless"
          entry-point-ref="oauthAuthenticationEntryPoint"
          use-expressions="true" authentication-manager-ref="emptyAuthenticationManager"
          xmlns="http://www.springframework.org/schema/security">
        <intercept-url pattern="/**"
                       access="#oauth2.hasScope('sps.write') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin')"
                       method="POST"/>
        <intercept-url pattern="/**"
                       access="#oauth2.hasScope('sps.write') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin')"
                       method="PUT"/>
        <intercept-url pattern="/**"
                       access="#oauth2.hasScope('sps.read') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin')"
                       method="GET"/>
        <intercept-url pattern="/**"
                       access="#oauth2.hasScope('sps.write') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin')"
                       method="DELETE"/>
        <intercept-url pattern="/**" access="denyAll"/>
        <custom-filter ref="resourceAgnosticAuthenticationFilter" before="PRE_AUTH_FILTER"/>
        <expression-handler ref="oauthWebExpressionHandler"/>
        <csrf disabled="true"/>
    </http>

    <http name="approvalsSecurity" pattern="/approvals/**" create-session="stateless" authentication-manager-ref="emptyAuthenticationManager"
          entry-point-ref="oauthAuthenticationEntryPoint" access-decision-manager-ref="accessDecisionManager"  use-expressions="false"
          xmlns="http://www.springframework.org/schema/security">
        <intercept-url pattern="/**" access="scope=oauth.approvals" />
        <custom-filter ref="approvalsResourceAuthenticationFilter" position="PRE_AUTH_FILTER" />
        <access-denied-handler ref="oauthAccessDeniedHandler" />
        <csrf disabled="true"/>
    </http>

    <http name="clientSecretSecurity" pattern="/oauth/clients/*/secret" create-session="stateless"
          authentication-manager-ref="emptyAuthenticationManager" entry-point-ref="oauthAuthenticationEntryPoint"  use-expressions="true"
          xmlns="http://www.springframework.org/schema/security">
        <intercept-url pattern="/oauth/clients/*/secret" access="#oauth2.hasAnyScope('clients.secret', 'clients.admin') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin')" />
        <custom-filter ref="oauthWithoutResourceAuthenticationFilter" position="PRE_AUTH_FILTER" />
        <access-denied-handler ref="oauthAccessDeniedHandler" />
        <expression-handler ref="oauthWebExpressionHandler" />
        <csrf disabled="true"/>
    </http>

    <http name="clientTxAdminSecurity" pattern="/oauth/clients/tx/**" create-session="stateless" entry-point-ref="oauthAuthenticationEntryPoint"
          use-expressions="true" authentication-manager-ref="emptyAuthenticationManager" xmlns="http://www.springframework.org/schema/security">
        <intercept-url pattern="/**" access="#oauth2.hasAnyScope('clients.admin') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin')" method="DELETE" />
        <intercept-url pattern="/**" access="#oauth2.hasAnyScope('clients.admin') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin')" method="POST" />
        <intercept-url pattern="/**" access="#oauth2.hasAnyScope('clients.admin') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin')" method="PUT" />
        <custom-filter ref="oauthWithoutResourceAuthenticationFilter" before="PRE_AUTH_FILTER" />
        <access-denied-handler ref="oauthAccessDeniedHandler" />
        <expression-handler ref="oauthWebExpressionHandler" />
        <csrf disabled="true"/>
    </http>

    <http name="clientAdminSecurity" pattern="/oauth/clients/**" create-session="stateless" entry-point-ref="oauthAuthenticationEntryPoint"
          use-expressions="true" authentication-manager-ref="emptyAuthenticationManager" xmlns="http://www.springframework.org/schema/security">
        <intercept-url pattern="/oauth/clients/**/meta" method="GET" access="isFullyAuthenticated()" />
        <intercept-url pattern="/**" access="#oauth2.hasAnyScope('clients.write','clients.admin') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin')" method="DELETE" />
        <intercept-url pattern="/**" access="#oauth2.hasAnyScope('clients.write','clients.admin') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin')" method="POST" />
        <intercept-url pattern="/**" access="#oauth2.hasAnyScope('clients.write','clients.admin') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin')" method="PUT" />
        <intercept-url pattern="/**" access="#oauth2.hasAnyScope('clients.read','clients.admin') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin')" method="GET" />
        <intercept-url pattern="/**" access="denyAll"/>
        <custom-filter ref="oauthWithoutResourceAuthenticationFilter" before="PRE_AUTH_FILTER" />
        <access-denied-handler ref="oauthAccessDeniedHandler" />
        <expression-handler ref="oauthWebExpressionHandler" />
        <csrf disabled="true"/>
    </http>

    <http name="checkTokenSecurity" pattern="/check_token" create-session="stateless" entry-point-ref="basicAuthenticationEntryPoint"
          authentication-manager-ref="clientAuthenticationManager" use-expressions="true"
          xmlns="http://www.springframework.org/schema/security">
        <intercept-url pattern="/**" access="hasAuthority('uaa.resource')" />
        <anonymous enabled="false" />
        <custom-filter ref="clientAuthenticationFilter" position="BASIC_AUTH_FILTER" />
        <access-denied-handler ref="oauthAccessDeniedHandler" />
        <csrf disabled="true"/>
    </http>

    <http name="tokenKeySecurity" pattern="/token_key**" create-session="stateless" entry-point-ref="basicAuthenticationEntryPoint"
          authentication-manager-ref="clientAuthenticationManager" use-expressions="true"
          xmlns="http://www.springframework.org/schema/security">
        <intercept-url pattern="/**" access="isAnonymous() or isFullyAuthenticated()" />
        <anonymous enabled="true" />
        <custom-filter ref="clientAuthenticationFilter" position="BASIC_AUTH_FILTER" />
        <access-denied-handler ref="oauthAccessDeniedHandler" />
        <csrf disabled="true"/>
    </http>

    <http name="clientInfoSecurity" pattern="/clientinfo" create-session="stateless" entry-point-ref="basicAuthenticationEntryPoint"
          authentication-manager-ref="clientAuthenticationManager" use-expressions="true"
          xmlns="http://www.springframework.org/schema/security">
        <intercept-url pattern="/**" access="isFullyAuthenticated()" />
        <anonymous enabled="false" />
        <custom-filter ref="clientAuthenticationFilter" position="BASIC_AUTH_FILTER" />
        <access-denied-handler ref="oauthAccessDeniedHandler" />
        <csrf disabled="true"/>
    </http>

    <http name="userInfoSecurity" pattern="/userinfo" create-session="stateless" authentication-manager-ref="emptyAuthenticationManager"
          entry-point-ref="oauthAuthenticationEntryPoint" access-decision-manager-ref="accessDecisionManager"  use-expressions="false"
          xmlns="http://www.springframework.org/schema/security">
        <intercept-url pattern="/**" access="scope=openid" />
        <custom-filter ref="openidResourceAuthenticationFilter" position="PRE_AUTH_FILTER" />
        <access-denied-handler ref="oauthAccessDeniedHandler" />
        <csrf disabled="true"/>
    </http>

    <http  name="codeStoreSecurity" pattern="/Codes/**" create-session="stateless" authentication-manager-ref="emptyAuthenticationManager"
           entry-point-ref="oauthAuthenticationEntryPoint"
           xmlns="http://www.springframework.org/schema/security" use-expressions="true">
        <intercept-url pattern="/**" access="#oauth2.hasAnyScope('oauth.login')"/>
        <custom-filter ref="resourceAgnosticAuthenticationFilter" position="PRE_AUTH_FILTER" />
        <anonymous enabled="false" />
        <expression-handler ref="oauthWebExpressionHandler" />
        <access-denied-handler ref="oauthAccessDeniedHandler" />
        <csrf disabled="true"/>
    </http>

    <!-- Pattern: /oauth/authorize parameters:{response_type=code,code=?} -->
    <http name="secFilterAutologinAuthorize" request-matcher-ref="autologinAuthorizeRequestMatcher"
          entry-point-ref="loginEntryPoint"
          xmlns="http://www.springframework.org/schema/security">
        <!-- TODO: add entry point that can redirect back to client app? -->
        <anonymous enabled="false"/>
        <custom-filter ref="autologinAuthenticationFilter" position="FORM_LOGIN_FILTER"/>
        <csrf disabled="false" token-repository-ref="loginCookieCsrfRepository"/>
    </http>

    <http name="secFilterCodeLogin" request-matcher-ref="autologinRequestMatcher" entry-point-ref="loginEntryPoint"
          xmlns="http://www.springframework.org/schema/security" use-expressions="false">
        <intercept-url pattern="/**" method="GET"/>
        <custom-filter ref="autologinAuthenticationFilter" position="FORM_LOGIN_FILTER"/>
        <anonymous enabled="false"/>
        <csrf disabled="true"/>
    </http>

    <!-- Pattern:/autologin -->
    <http name="secFilterAutologin" pattern="/autologin" create-session="stateless"
          entry-point-ref="basicAuthenticationEntryPoint"
          xmlns="http://www.springframework.org/schema/security" authentication-manager-ref="emptyAuthenticationManager"
          use-expressions="false">
        <intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY" method="POST"/>
        <anonymous enabled="false"/>
        <custom-filter ref="clientAuthenticationFilter" position="BASIC_AUTH_FILTER"/>
        <csrf disabled="true"/>
    </http>

    <!--<bean id="backwardsCompatibleScopeParameter"
          class="com.tianzhu.identity.uaa.web.BackwardsCompatibleScopeParsingFilter"/>-->

    <http name="changeEmailSecurity"
          entry-point-ref="loginEntryPoint"
          use-expressions="false"
          pattern="/change_email**"
          xmlns="http://www.springframework.org/schema/security">
        <access-denied-handler ref="loginEntryPoint"/>
        <intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY"/>
        <csrf disabled="false"/>
    </http>

    <http name="invitationsSecurity"
          entry-point-ref="loginEntryPoint"
          use-expressions="true"
          pattern="/invitations/**"
          xmlns="http://www.springframework.org/schema/security">
        <access-denied-handler ref="loginEntryPoint"/>
        <intercept-url pattern="/invitations/accept" access="isFullyAuthenticated() or isAnonymous()" method="GET"/>
        <intercept-url pattern="/invitations/accept.do" access="hasAuthority('uaa.invited')" method="POST"/>
        <intercept-url pattern="/invitations/accept_enterprise.do" access="hasAuthority('uaa.invited')" method="POST"/>
        <intercept-url pattern="/**" access="denyAll"/>
        <csrf disabled="false"/>
        <custom-filter ref="acceptInvitationSecurityContextPersistenceFilter" before="FIRST"/>
    </http>

    <http name="invitationsEndpointSecurity"
          entry-point-ref="oauthAuthenticationEntryPoint"
          use-expressions="true"
          pattern="/invite_users/**"
          xmlns="http://www.springframework.org/schema/security">
        <intercept-url pattern="/**"
                       access="#oauth2.hasAnyScope('scim.invite') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin')"
                       method="POST"/>
        <intercept-url pattern="**" access="denyAll"/>
        <expression-handler ref="oauthWebExpressionHandler"/>
        <access-denied-handler ref="oauthAccessDeniedHandler"/>
        <custom-filter ref="resourceAgnosticAuthenticationFilter" position="PRE_AUTH_FILTER"/>
        <csrf disabled="true"/>
    </http>

    <http name="resetPasswordSubmit"
          pattern="/reset_password.do"
          disable-url-rewriting="true"
          entry-point-ref="loginEntryPoint"
          use-expressions="false"
          xmlns="http://www.springframework.org/schema/security">
        <custom-filter ref="userManagementSecurityFilter" before="ANONYMOUS_FILTER"/>
        <custom-filter ref="resetPasswordAuthenticationFilter" position="LAST"/>
        <csrf disabled="false"/>
        <access-denied-handler ref="loginEntryPoint"/>
    </http>

    <http name="resetPasswordSecurity"
          pattern="/reset_password**"
          disable-url-rewriting="true"
          entry-point-ref="loginEntryPoint"
          use-expressions="false"
          xmlns="http://www.springframework.org/schema/security">
        <intercept-url pattern="/**" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
        <csrf disabled="false"/>
        <access-denied-handler ref="loginEntryPoint"/>
    </http>

    <http name="forgotPasswordSecurity"
          pattern="/forgot_password**"
          disable-url-rewriting="true"
          entry-point-ref="loginEntryPoint"
          use-expressions="false"
          xmlns="http://www.springframework.org/schema/security">
        <intercept-url pattern="/**" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
        <csrf disabled="true"/>
        <access-denied-handler ref="loginEntryPoint"/>
    </http>

    <http name="changePasswordSecurity"
          pattern="/change_password**"
          disable-url-rewriting="true"
          entry-point-ref="loginEntryPoint"
          use-expressions="false"
          xmlns="http://www.springframework.org/schema/security">
        <intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY"/>
        <csrf disabled="false"/>
        <access-denied-handler ref="loginEntryPoint"/>
    </http>

    <http name="forcePasswordChangeSecurity"
          pattern="/force_password_change**"
          entry-point-ref="loginEntryPoint"
          use-expressions="false"
          xmlns="http://www.springframework.org/schema/security">
        <intercept-url pattern="/**" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
        <csrf disabled="false"
              token-repository-ref="loginCookieCsrfRepository"
        />
        <access-denied-handler ref="loginEntryPoint"/>
    </http>

    <http name="totpSecurity"
          pattern="/login/mfa/**"
          entry-point-ref="loginEntryPoint"
          use-expressions="false"
          xmlns="http://www.springframework.org/schema/security">
        <intercept-url pattern="/**" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
        <csrf disabled="false"
              token-repository-ref="loginCookieCsrfRepository"
        />
        <access-denied-handler ref="loginEntryPoint"/>
    </http>

    <http name="uiSecurity"
          request-matcher-ref="uiRequestMatcher"
          use-expressions="false"
          authentication-manager-ref="zoneAwareAuthzAuthenticationManager"
          xmlns="http://www.springframework.org/schema/security">
        <intercept-url pattern="/login**" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
        <intercept-url pattern="/login/idp_discovery" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
        <intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY"/>
        <form-login login-page="/login"
                    username-parameter="username"
                    password-parameter="password"
                    login-processing-url="/login.do"
                    authentication-success-handler-ref="accountSavingAuthenticationSuccessHandler"
                    authentication-failure-handler-ref="uaaAuthenticationFailureHandler"
                    authentication-details-source-ref="authenticationDetailsSource"
                    default-target-url="/"/>
        <!--<logout logout-url="/logout.do" success-handler-ref="logoutHandler" invalidate-session="true"/>-->
        <custom-filter ref="clientRedirectStateCache" before="FORM_LOGIN_FILTER"/>
        <custom-filter ref="logoutFilter" after="LOGOUT_FILTER"/>
        <custom-filter ref="samlLogoutFilter" before="LOGOUT_FILTER"/>
        <csrf disabled="false"
              token-repository-ref="loginCookieCsrfRepository"
              request-matcher-ref="uiCookeCsrfRequestMatcher"/>
        <access-denied-handler error-page="/login?error=invalid_login_request"/>
        <request-cache ref="clientRedirectStateCache"/>
    </http>

    <http name="deleteSavedAccountSecurity" pattern="/delete_saved_account**" create-session="stateless"
          entry-point-ref="basicAuthenticationEntryPoint"
          authentication-manager-ref="clientAuthenticationManager" use-expressions="false"
          xmlns="http://www.springframework.org/schema/security">
        <intercept-url pattern="/**" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
    </http>

    <security:http name="verifyEmailSecurity" pattern="/verify_email" disable-url-rewriting="true"
                   entry-point-ref="loginEntryPoint" use-expressions="false">
        <security:intercept-url pattern="/verify_email" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
        <security:anonymous enabled="true"/>
        <security:csrf disabled="true"/>
    </security:http>

    <security:http name="verifyUserSecurity" pattern="/verify_user" disable-url-rewriting="true"
                   entry-point-ref="loginEntryPoint" use-expressions="false">
        <security:intercept-url pattern="/**" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
        <security:anonymous enabled="true"/>
        <security:csrf disabled="true"/>
    </security:http>

    <security:http name="acceptInvitationSecurity" pattern="/invitations/accept" disable-url-rewriting="true"
                   entry-point-ref="loginEntryPoint" use-expressions="false">
        <security:intercept-url pattern="/**" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
        <security:anonymous enabled="true"/>
        <security:csrf disabled="true"/>
    </security:http>

    <security:http name="openIdSecurity" use-expressions="false">
        <security:intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY"/>
        <security:custom-filter before="FIRST" ref="metadataGeneratorFilter"/>
        <security:custom-filter after="FIRST" ref="httpsHeaderFilter"/>
        <security:custom-filter before="BASIC_AUTH_FILTER" ref="idpMetadataGeneratorFilter"/>
        <security:custom-filter after="BASIC_AUTH_FILTER" ref="samlFilter"/>
        <security:custom-filter after="FILTER_SECURITY_INTERCEPTOR" ref="samlIdpLoginFilter"/>
        <security:custom-filter ref="oauth2ClientFilter" after="EXCEPTION_TRANSLATION_FILTER"/>
        <security:logout logout-url="/logout" success-handler-ref="logoutHandler"/>
        <security:openid-login login-page="/login" user-service-ref="openIdUserDetailsService"
                               authentication-failure-url="/login?error=true">
            <security:attribute-exchange identifier-match=".*myopenid.com.*">
                <security:openid-attribute name="email" type="http://schema.openid.net/contact/email"
                                           required="true"/>
                <security:openid-attribute name="fullname" type="http://schema.openid.net/namePerson"
                                           required="true"/>
            </security:attribute-exchange>
            <security:attribute-exchange identifier-match=".*">
                <security:openid-attribute name="email" type="http://axschema.org/contact/email"
                                           required="true" count="1"/>
                <security:openid-attribute name="firstname" type="http://axschema.org/namePerson/first"
                                           required="true"/>
                <security:openid-attribute name="lastname" type="http://axschema.org/namePerson/last"
                                           required="true"/>
                <security:openid-attribute name="fullname" type="http://axschema.org/namePerson"
                                           required="true"/>
            </security:attribute-exchange>
        </security:openid-login>
        <security:anonymous enabled="false"/>
        <security:csrf disabled="true"/>
    </security:http>


</beans>
