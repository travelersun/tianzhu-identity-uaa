<?xml version="1.0" encoding="UTF-8" ?>
<!--
    Cloud Foundry
    Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.

    This product is licensed to you under the Apache License, Version 2.0 (the "License").
    You may not use this product except in compliance with the License.

    This product includes a number of subcomponents with
    separate copyright notices and license terms. Your use of these
    subcomponents is subject to the terms and conditions of the
    subcomponent's license, as noted in the LICENSE file.

-->
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.springframework.org/schema/beans"
    xmlns:sec="http://www.springframework.org/schema/security" xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
    xmlns:util="http://www.springframework.org/schema/util"
    xsi:schemaLocation="http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2-2.0.xsd
        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.2.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.1.xsd">


    <oauth:resource-server id="oauthResourceAuthenticationFilter" token-services-ref="tokenServices"
                           resource-id="oauth" entry-point-ref="oauthAuthenticationEntryPoint" />

<!--
    <http name="secFilterLoginServerAuthenticate" request-matcher-ref="loginAuthenticateRequestMatcher" create-session="never" entry-point-ref="oauthAuthenticationEntryPoint"
          authentication-manager-ref="loginAuthenticationMgr" xmlns="http://www.springframework.org/schema/security" use-expressions="false">
        <intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY" />
        <custom-filter ref="oauthResourceAuthenticationFilter" position="PRE_AUTH_FILTER" />
        &lt;!&ndash; scope authentication filter configured with a scope authentication manager &ndash;&gt;
        <custom-filter ref="oauthLoginScopeAuthenticatingFilter" after="PRE_AUTH_FILTER"/>
        <anonymous enabled="false" />
        <access-denied-handler ref="oauthAccessDeniedHandler" />
        <csrf disabled="true"/>
    </http>-->

    <!--<sec:http name="secFilterAuthenticateOpen"  pattern="/authenticate/**" security="none" />-->

    <bean id="loginAuthenticateRequestMatcher" class="com.tianzhu.identity.uaa.security.web.UaaRequestMatcher">
        <constructor-arg value="/authenticate" />
        <property name="accept" value="application/json" />
        <property name="headers">
            <map>
                <entry key="Authorization" value="bearer "  />
            </map>
        </property>
    </bean>

    <bean id="loginAuthorizeRequestMatcher" class="com.tianzhu.identity.uaa.security.web.UaaRequestMatcher">
        <constructor-arg value="/oauth/authorize" />
        <property name="accept" value="application/json" />
        <property name="parameters">
            <map>
                <entry key="source" value="login" />
            </map>
        </property>
    </bean>


    <bean id="oauthLoginAuthManager" class="com.tianzhu.identity.uaa.authentication.manager.ScopeAuthenticationManager">
        <property name="requiredScopes">
            <list>
                <value type="java.lang.String">oauth.login</value>
            </list>
        </property>
    </bean>

    <bean id="loginTokenRequestMatcher" class="com.tianzhu.identity.uaa.security.web.UaaRequestMatcher">
        <constructor-arg value="/oauth/token" />
        <property name="accept" value="application/json" />
        <property name="headers">
            <map>
                <entry key="Authorization" value="bearer " />
            </map>
        </property>
        <property name="parameters">
            <map>
                <entry key="source" value="login" />
                <entry key="grant_type" value="password" />
                <entry key="add_new" value="" />
            </map>
        </property>
    </bean>


    <bean id="loginAuthorizeRequestMatcherOld" class="com.tianzhu.identity.uaa.security.web.UaaRequestMatcher">
        <constructor-arg value="/oauth/authorize" />
        <property name="accept" value="application/json" />
        <property name="parameters">
            <map>
                <entry key="login" value="{" />
            </map>
        </property>
    </bean>
    <!-- End support for older login servers -->
    <util:list id="addNewUserParameters" value-type="java.lang.String">
        <value>login</value>
        <value>username</value>
        <value>user_id</value>
        <value>origin</value>
        <value>given_name</value>
        <value>family_name</value>
        <value>email</value>
        <value>authorities</value>
    </util:list>



    <bean id="loginAuthenticationMgr" class="com.tianzhu.identity.uaa.authentication.manager.LoginAuthenticationManager">
        <property name="userDatabase" ref="userDatabase" />
    </bean>


    <bean id="timeService" class="com.tianzhu.identity.uaa.util.TimeServiceImpl"/>

    <bean id="codeStore" class="com.tianzhu.identity.uaa.codestore.JdbcExpiringCodeStore">
        <constructor-arg name="dataSource" ref="dataSource" />
        <constructor-arg name="timeService" ref="timeService"/>
    </bean>

</beans>
