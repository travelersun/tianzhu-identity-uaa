<?xml version="1.0" encoding="UTF-8" ?>
<!--
    Cloud Foundry
    Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.

    This product is licensed to you under the Apache License, Version 2.0 (the "License").
    You may not use this product except in compliance with the License.

    This product includes a number of subcomponents with
    separate copyright notices and license terms. Your use of these
    subcomponents is subject to the terms and conditions of the
    subcomponent's license, as noted in the LICENSE file.

-->

<beans
        xmlns="http://www.springframework.org/schema/beans"
        xmlns:security="http://www.springframework.org/schema/security"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:mvc="http://www.springframework.org/schema/mvc"
        xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
        xmlns:util="http://www.springframework.org/schema/util"
        xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
    http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.2.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
    http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd
    http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2-2.0.xsd">


    <authentication-manager xmlns="http://www.springframework.org/schema/security"/>

    <oauth:resource id="uaa" access-token-uri="${uaa.token.url:http://localhost:8080/uaa/oauth/token}"
                    client-id="login" client-secret="${LOGIN_SECRET:loginsecret}" type="client_credentials"/>

    <bean id="notificationsTemplate" class="com.tianzhu.identity.uaa.message.LocalUaaRestTemplate">
        <constructor-arg ref="uaa"/>
        <property name="clientId" value="login"/>
        <property name="tokenServices" ref="tokenServices"/>
        <property name="clientDetailsService" ref="jdbcClientDetailsService"/>
        <property name="verifySsl" value="${notifications.verify_ssl:false}"/>
    </bean>

    <bean id="notificationsUrl" class="java.lang.String">
        <constructor-arg value="${notifications.url:}"/>
    </bean>

    <bean id="resetPasswordEntryPoint"
          class="com.tianzhu.identity.uaa.account.ResetPasswordAuthenticationEntryPoint"/>


    <bean id="uiCookeCsrfRequestMatcher" class="org.springframework.security.web.util.matcher.OrRequestMatcher">
        <constructor-arg>
            <list>
                <bean class="org.springframework.security.web.util.matcher.AntPathRequestMatcher">
                    <constructor-arg value="/login.do"/>
                </bean>
                <bean class="com.tianzhu.identity.uaa.security.web.UaaRequestMatcher">
                    <constructor-arg value="/oauth/authorize"/>
                    <property name="method" value="POST"/>
                </bean>
                <bean class="com.tianzhu.identity.uaa.security.web.UaaRequestMatcher">
                    <constructor-arg value="/profile"/>
                    <property name="method" value="POST"/>
                </bean>
            </list>
        </constructor-arg>
    </bean>

    <bean id="uiLogoutRequestMatcher" class="org.springframework.security.web.util.matcher.AntPathRequestMatcher">
        <constructor-arg value="/logout.do"/>
    </bean>

    <bean id="uiAuthorizeRequestMatcher" class="org.springframework.security.web.util.matcher.AntPathRequestMatcher">
        <constructor-arg value="/oauth/authorize**"/>
    </bean>

    <bean id="uiRequestMatcher" class="org.springframework.security.web.util.matcher.OrRequestMatcher">
        <constructor-arg>
            <list>
                <bean class="org.springframework.security.web.util.matcher.AntPathRequestMatcher">
                    <constructor-arg value="/"/>
                </bean>
                <bean class="org.springframework.security.web.util.matcher.AntPathRequestMatcher">
                    <constructor-arg value="/oauth/**"/>
                </bean>
                <bean class="org.springframework.security.web.util.matcher.AntPathRequestMatcher">
                    <constructor-arg value="/login**"/>
                </bean>
                <bean class="org.springframework.security.web.util.matcher.AntPathRequestMatcher">
                    <constructor-arg value="/login/idp_discovery"/>
                </bean>
                <bean class="org.springframework.security.web.util.matcher.AntPathRequestMatcher">
                    <constructor-arg value="/logout.do**"/>
                </bean>
                <bean class="org.springframework.security.web.util.matcher.AntPathRequestMatcher">
                    <constructor-arg value="/profile"/>
                </bean>
            </list>
        </constructor-arg>
    </bean>

    <bean id="samlLogoutHandlers" class="java.util.ArrayList">
        <constructor-arg>
            <util:list>
                <ref bean="uaaAuthenticationFailureHandler"/>
                <ref bean="samlLogoutHandler"/>
            </util:list>
        </constructor-arg>
    </bean>

    <bean id="loginCookieCsrfRepository"
          class="com.tianzhu.identity.uaa.security.web.CookieBasedCsrfTokenRepository">
        <property name="secure" value="${require_https:false}"/>
    </bean>

    <bean id="accountSavingAuthenticationSuccessHandler"
          class="com.tianzhu.identity.uaa.login.AccountSavingAuthenticationSuccessHandler">
        <property name="redirectingHandler" ref="successRedirectHandler"/>
    </bean>


    <bean name="clientRedirectStateCache" class="com.tianzhu.identity.uaa.web.UaaSavedRequestCache">
        <property name="requestMatcher" ref="uiAuthorizeRequestMatcher"/>
    </bean>

    <bean id="errorMessageAuthenticationFailureHandler"
          class="org.springframework.security.web.authentication.ExceptionMappingAuthenticationFailureHandler">
        <property name="exceptionMappings">
            <map>
                <entry key="com.tianzhu.identity.uaa.authentication.AccountNotVerifiedException"
                       value="/login?error=account_not_verified"/>
                <entry key="com.tianzhu.identity.uaa.authentication.PasswordExpiredException"
                       value="/login?error=password_expired"/>
                <entry key="com.tianzhu.identity.uaa.authentication.AuthenticationPolicyRejectionException"
                       value="/login?error=account_locked"/>
                <entry key="com.tianzhu.identity.uaa.authentication.AccountNotPreCreatedException"
                       value="/login?error=account_not_precreated"/>
            </map>
        </property>
        <property name="defaultFailureUrl" value="/login?error=login_failure"/>
    </bean>

    <bean id="uaaAuthenticationFailureHandler" class="com.tianzhu.identity.uaa.login.UaaAuthenticationFailureHandler">
        <constructor-arg name="delegate" ref="errorMessageAuthenticationFailureHandler"/>
    </bean>

<!--
    <security:http name="openIdSecurity" use-expressions="false">
        <security:intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY"/>
        <security:custom-filter before="FIRST" ref="metadataGeneratorFilter"/>
        <security:custom-filter after="FIRST" ref="httpsHeaderFilter"/>
        <security:custom-filter before="BASIC_AUTH_FILTER" ref="idpMetadataGeneratorFilter"/>
        <security:custom-filter after="BASIC_AUTH_FILTER" ref="samlFilter"/>
        <security:custom-filter after="FILTER_SECURITY_INTERCEPTOR" ref="samlIdpLoginFilter"/>
        <security:custom-filter ref="oauth2ClientFilter" after="EXCEPTION_TRANSLATION_FILTER"/>
        <security:logout logout-url="/logout" success-handler-ref="logoutHandler"/>
        <security:openid-login login-page="/login" user-service-ref="openIdUserDetailsService"
                               authentication-failure-url="/login?error=true">
            <security:attribute-exchange identifier-match=".*myopenid.com.*">
                <security:openid-attribute name="email" type="http://schema.openid.net/contact/email"
                                           required="true"/>
                <security:openid-attribute name="fullname" type="http://schema.openid.net/namePerson"
                                           required="true"/>
            </security:attribute-exchange>
            <security:attribute-exchange identifier-match=".*">
                <security:openid-attribute name="email" type="http://axschema.org/contact/email"
                                           required="true" count="1"/>
                <security:openid-attribute name="firstname" type="http://axschema.org/namePerson/first"
                                           required="true"/>
                <security:openid-attribute name="lastname" type="http://axschema.org/namePerson/last"
                                           required="true"/>
                <security:openid-attribute name="fullname" type="http://axschema.org/namePerson"
                                           required="true"/>
            </security:attribute-exchange>
        </security:openid-login>
        <security:anonymous enabled="false"/>
        <security:csrf disabled="true"/>
    </security:http>-->


    <bean id="loginEntryPoint" class="com.tianzhu.identity.uaa.security.CsrfAwareEntryPointAndDeniedHandler">
        <constructor-arg name="redirectCsrf" value="/invalid_request"/>
        <constructor-arg name="redirectNotLoggedIn" value="/login"/>
    </bean>

    <bean id="logoutHandler" class="com.tianzhu.identity.uaa.authentication.ZoneAwareWhitelistLogoutHandler">
        <constructor-arg ref="jdbcClientDetailsService"/>
    </bean>


    <bean id="links" class="java.util.HashMap">
        <constructor-arg value="#{@config['links']==null ? T(java.util.Collections).EMPTY_MAP : @config['links']}"/>
    </bean>

    <!--apply the oauth client context -->
    <oauth:client id="oauth2ClientFilter"/>


    <util:map id="notifications" key-type="com.tianzhu.identity.uaa.message.MessageType">
        <entry key="CREATE_ACCOUNT_CONFIRMATION">
            <map>
                <entry key="description" value="Send activation code"/>
                <entry key="id" value="f7a85fdc-d920-41f0-b3a4-55db08e408ce"/>
                <entry key="critical" value="true" value-type="java.lang.Boolean"/>
            </map>
        </entry>
        <entry key="PASSWORD_RESET">
            <map>
                <entry key="description" value="Reset Password"/>
                <entry key="id" value="141200f6-93bd-4761-a721-941ab511ba2c"/>
                <entry key="critical" value="true" value-type="java.lang.Boolean"/>
            </map>
        </entry>
        <entry key="CHANGE_EMAIL">
            <map>
                <entry key="description" value="Change Email"/>
                <entry key="id" value="712de257-a7fa-44cb-b1ac-8a6588d1be23"/>
                <entry key="critical" value="true" value-type="java.lang.Boolean"/>
            </map>
        </entry>
        <entry key="INVITATION">
            <map>
                <entry key="description" value="Invitation"/>
                <entry key="id" value="e6722687-3f0f-4e7a-9925-839a04712cea"/>
                <entry key="critical" value="true" value-type="java.lang.Boolean"/>
            </map>
        </entry>
    </util:map>



    <!-- Pattern: /oauth/authorize parameters:{response_type=code,code=?} -->
    <bean id="autologinAuthorizeRequestMatcher" class="com.tianzhu.identity.uaa.security.web.UaaRequestMatcher">
        <constructor-arg value="/oauth/authorize"/>
        <property name="parameters">
            <map>
                <entry key="response_type" value="code"/>
                <entry key="code" value=""/>
            </map>
        </property>
    </bean>

    <bean id="autologinRequestMatcher" class="com.tianzhu.identity.uaa.security.web.UaaRequestMatcher">
        <constructor-arg value="/autologin"/>
        <property name="parameters">
            <map>
                <entry key="code" value=""/>
            </map>
        </property>
    </bean>

    <!-- Handler deciding where to redirect user after successful login -->
    <bean id="successRedirectHandler"
          class="com.tianzhu.identity.uaa.web.UaaSavedRequestAwareAuthenticationSuccessHandler"/>

    <bean id="openIdUserDetailsService" class="com.tianzhu.identity.uaa.account.OpenIdUserDetailsService"/>

    <bean id="loginServerConfig" class="com.tianzhu.identity.uaa.impl.config.LoginServerConfig"/>


    <bean id="buildInfo" class="com.tianzhu.identity.uaa.home.BuildInfo"/>


    <bean id="emailService" class="com.tianzhu.identity.uaa.message.EmailService">
        <constructor-arg index="0"
                         ref="#{T(org.springframework.util.StringUtils).hasText('${smtp.host:}') ? 'smtpJavaMailSender' : 'fakeJavaMailSender'}"/>
        <constructor-arg index="1" value="${login.url:http://localhost:8080/uaa}"/>
        <constructor-arg index="2" value="${smtp.from_address:}"/>
    </bean>

    <bean id="smtpJavaMailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="host" value="${smtp.host:localhost}"/>
        <property name="port" value="${smtp.port:25}"/>
        <property name="username" value="${smtp.user:}"/>
        <property name="password" value="${smtp.password:}"/>
        <property name="javaMailProperties">
            <props>
                <prop key="mail.smtp.auth">${smtp.auth:false}</prop>
                <prop key="mail.smtp.starttls.enable">${smtp.starttls:false}</prop>
            </props>
        </property>
    </bean>

    <bean id="fakeJavaMailSender" class="com.tianzhu.identity.uaa.message.util.FakeJavaMailSender"/>

    <bean id="notificationsService" class="com.tianzhu.identity.uaa.message.NotificationsService">
        <constructor-arg ref="notificationsTemplate"/>
        <constructor-arg ref="notificationsUrl"/>
        <constructor-arg ref="notifications"/>
        <constructor-arg value="${notifications.send_in_default_zone:true}"/>
    </bean>

    <bean id="accountCreationService" class="com.tianzhu.identity.uaa.account.EmailAccountCreationService">
        <constructor-arg ref="mailTemplateEngine"/>
        <constructor-arg ref="messageService"/>
        <constructor-arg ref="codeStore"/>
        <constructor-arg ref="scimUserProvisioning"/>
        <constructor-arg ref="jdbcClientDetailsService"/>
        <constructor-arg ref="uaaPasswordValidator"/>
    </bean>

    <bean id="uaaPasswordValidator" class="com.tianzhu.identity.uaa.scim.validate.UaaPasswordPolicyValidator">
        <constructor-arg ref="globalPasswordPolicy"/>
        <constructor-arg ref="identityProviderProvisioning"/>
    </bean>

    <bean id="invitationsService" class="com.tianzhu.identity.uaa.invitations.EmailInvitationsService"/>

    <bean id="changePasswordService" class="com.tianzhu.identity.uaa.account.UaaChangePasswordService">
        <constructor-arg ref="scimUserProvisioning"/>
        <constructor-arg ref="uaaPasswordValidator"/>
    </bean>

    <bean id="messagePropertiesSource" class="org.springframework.core.io.support.ResourcePropertySource" >
        <constructor-arg value="messages.properties"/>
    </bean>

    <bean id="resetPasswordService" class="com.tianzhu.identity.uaa.account.UaaResetPasswordService">
        <constructor-arg ref="scimUserProvisioning"/>
        <constructor-arg ref="codeStore"/>
        <constructor-arg ref="uaaPasswordValidator"/>
        <constructor-arg ref="jdbcClientDetailsService"/>
        <constructor-arg ref="messagePropertiesSource"/>
    </bean>

    <bean id="changeEmailService" class="com.tianzhu.identity.uaa.account.EmailChangeEmailService">
        <constructor-arg ref="mailTemplateEngine"/>
        <constructor-arg ref="messageService"/>
        <constructor-arg ref="jdbcClientDetailsService"/>
        <constructor-arg ref="scimUserProvisioning"/>
        <constructor-arg ref="codeStore"/>
    </bean>


    <bean id="jdbcUserGoogleMfaCredentialsProvisioning" class="com.tianzhu.identity.uaa.mfa.JdbcUserGoogleMfaCredentialsProvisioning">
        <constructor-arg index="0" ref="jdbcTemplate"/>
    </bean>

    <bean id="userGoogleMfaCredentialsProvisioning" class="com.tianzhu.identity.uaa.mfa.UserGoogleMfaCredentialsProvisioning">
        <property name="jdbcProvisioner" ref="jdbcUserGoogleMfaCredentialsProvisioning"></property>
        <property name="mfaProviderProvisioning" ref="mfaProviderProvisioning"/>
    </bean>


    <bean id="googleAuthenticatorAdapter" class="com.tianzhu.identity.uaa.mfa.GoogleAuthenticatorAdapter">
        <property name="authenticator" ref="googleAuthenticator"/>
    </bean>

    <bean id="googleAuthenticator" class="com.warrenstrange.googleauth.GoogleAuthenticator">
        <constructor-arg name="config" ref="googleAuthenticatorConfig"/>
        <property name="credentialRepository" ref="userGoogleMfaCredentialsProvisioning"/>
    </bean>

    <bean id ="googleAuthenticatorConfig" class="com.warrenstrange.googleauth.GoogleAuthenticatorConfig"
        factory-bean="googleAuthenticatorConfigFactory"
        factory-method="build" />

    <bean id="googleAuthenticatorConfigFactory"
          class="com.warrenstrange.googleauth.GoogleAuthenticatorConfig.GoogleAuthenticatorConfigBuilder"/>

</beans>
